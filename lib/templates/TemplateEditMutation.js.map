{"version":3,"sources":["../../src/templates/TemplateEditMutation.js"],"names":["mutation","name","inputFields","id","type","GraphQLID","TemplateFieldsType","mutateAndGetPayload","args","context","active","TemplateModel","findOne","_id","template","error","update","TemplateLoader","clearCache","outputFields","TemplateType","resolve","load","newTemplate","GraphQLString"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,gDAA6B;AAC5CC,EAAAA,IAAI,EAAE,cADsC;AAE5CC,EAAAA,WAAW;AACTC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAE,6BAAeC,kBAAf;AADJ;AADK,KAINC,8BAJM,CAFiC;AAQ5CC,EAAAA,mBAAmB;AAAA;AAAA;AAAA,4BAAE,iBAAOC,IAAP,EAAaC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACXN,cAAAA,EADW,GACIK,IADJ,CACXL,EADW,EACPO,MADO,GACIF,IADJ,CACPE,MADO;AAAA;AAAA,qBAGIC,0BAAcC,OAAd,CAAsB;AAC3CC,gBAAAA,GAAG,EAAE,gCAAaV,EAAb,EAAiBA;AADqB,eAAtB,CAHJ;;AAAA;AAGbW,cAAAA,QAHa;;AAAA,kBAQdA,QARc;AAAA;AAAA;AAAA;;AAAA,+CASV;AACLC,gBAAAA,KAAK,EAAE;AADF,eATU;;AAAA;AAAA;AAAA,qBAebD,QAAQ,CAACE,MAAT,CAAgB;AAAEN,gBAAAA,MAAM,EAANA;AAAF,eAAhB,CAfa;;AAAA;AAiBnB;AACAO,cAAAA,cAAc,CAACC,UAAf,CAA0BT,OAA1B,EAAmCK,QAAQ,CAACD,GAA5C;AAlBmB,+CAoBZ;AACLV,gBAAAA,EAAE,EAAEW,QAAQ,CAACD,GADR;AAELE,gBAAAA,KAAK,EAAE;AAFF,eApBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KARyB;AAiC5CI,EAAAA,YAAY,EAAE;AACZL,IAAAA,QAAQ,EAAE;AACRV,MAAAA,IAAI,EAAEgB,wBADE;AAERC,MAAAA,OAAO;AAAA;AAAA;AAAA,gCAAE,wBAAeb,IAAf,EAAqBC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASN,kBAAAA,EAAT,QAASA,EAAT;AAAA;AAAA,yBACmBc,cAAc,CAACK,IAAf,CAAoBb,OAApB,EAA6BN,EAA7B,CADnB;;AAAA;AACDoB,kBAAAA,WADC;;AAAA,sBAGFA,WAHE;AAAA;AAAA;AAAA;;AAAA,oDAIE,IAJF;;AAAA;AAAA,oDAOAA,WAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFC,KADE;AAaZR,IAAAA,KAAK,EAAE;AACLX,MAAAA,IAAI,EAAEoB,sBADD;AAELH,MAAAA,OAAO,EAAE;AAAA,YAAGN,KAAH,SAAGA,KAAH;AAAA,eAAeA,KAAf;AAAA;AAFJ;AAbK;AAjC8B,CAA7B,CAAjB;eAqDef,Q","sourcesContent":["import { GraphQLString, GraphQLNonNull, GraphQLID } from \"graphql\";\nimport { fromGlobalId, mutationWithClientMutationId } from \"graphql-relay\";\n\nimport * as TemplateLoader from \"../TemplateLoader\";\nimport TemplateType from \"../TemplateType\";\nimport TemplateModel from \"../TemplateModel\";\n\nimport TemplateFieldsType from \"../TemplateFieldsType\";\n\nconst mutation = mutationWithClientMutationId({\n  name: \"TemplateEdit\",\n  inputFields: {\n    id: {\n      type: GraphQLNonNull(GraphQLID)\n    },\n    ...TemplateFieldsType\n  },\n  mutateAndGetPayload: async (args, context) => {\n    const { id, active } = args;\n\n    const template = await TemplateModel.findOne({\n      _id: fromGlobalId(id).id\n    });\n\n    // If not, throw an error\n    if (!template) {\n      return {\n        error: \"Template invÃ¡lido\"\n      };\n    }\n\n    // Edit record\n    await template.update({ active });\n\n    // Clear dataloader cache\n    TemplateLoader.clearCache(context, template._id);\n\n    return {\n      id: template._id,\n      error: null\n    };\n  },\n  outputFields: {\n    template: {\n      type: TemplateType,\n      resolve: async ({ id }, args, context) => {\n        const newTemplate = await TemplateLoader.load(context, id);\n\n        if (!newTemplate) {\n          return null;\n        }\n\n        return newTemplate;\n      }\n    },\n    error: {\n      type: GraphQLString,\n      resolve: ({ error }) => error\n    }\n  }\n});\n\nexport default mutation;\n"],"file":"TemplateEditMutation.js"}